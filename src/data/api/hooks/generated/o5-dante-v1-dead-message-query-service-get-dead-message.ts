/**
 * @generated by @pentops/jsonapi-jdef-ts-generator (Plugin: NormalizedQueryPlugin) - do not edit */

import {
  O5DanteV1DeadMessageQueryServiceGetDeadMessageResponse,
  O5DanteV1DeadMessageQueryServiceGetDeadMessageGetDeadMessageRequest,
} from '../../../types/generated';
import { o5DanteV1DeadMessageQueryServiceGetDeadMessage } from '../../generated';
import { schema } from 'normalizr';
import { o5DanteV1DeadMessageStateEntity } from '../../../entities/generated/o5-dante-v1-dead-message-state';
import { useQuery, type UseQueryOptions } from '@tanstack/react-query';
import { usePreloadDataFromNormalizedCache } from '@pentops/normalized-query-cache';

export const o5DanteV1DeadMessageQueryServiceGetDeadMessageResponseEntity = new schema.Object<O5DanteV1DeadMessageQueryServiceGetDeadMessageResponse>(
  {
    message: o5DanteV1DeadMessageStateEntity,
  },
);
/**
 * @generated by NormalizedQueryPlugin (get /dante/v1/q/message/:messageId) */
export function useO5DanteV1DeadMessageQueryServiceGetDeadMessage(
  request: O5DanteV1DeadMessageQueryServiceGetDeadMessageGetDeadMessageRequest | undefined,
  options?: Partial<UseQueryOptions<O5DanteV1DeadMessageQueryServiceGetDeadMessageResponse | undefined>>,
) {
  const preloadData = usePreloadDataFromNormalizedCache<O5DanteV1DeadMessageQueryServiceGetDeadMessageResponse, 'message'>(
    o5DanteV1DeadMessageQueryServiceGetDeadMessageResponseEntity,
    { message: request?.messageId },
  );

  return useQuery({
    queryKey: [o5DanteV1DeadMessageStateEntity.key, request],
    queryFn: async () => o5DanteV1DeadMessageQueryServiceGetDeadMessage('', request),
    enabled: Boolean(request?.messageId),
    meta: { normalizationSchema: o5DanteV1DeadMessageQueryServiceGetDeadMessageResponseEntity },
    placeholderData: preloadData,
    ...options,
  });
}
