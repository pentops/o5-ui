/**
 * @generated by @pentops/jsonapi-jdef-ts-generator (Plugin: NormalizedQueryPlugin) - do not edit */

import { useInfiniteQuery, type UseInfiniteQueryOptions, type InfiniteData, type QueryKey } from '@tanstack/react-query';
import {
  J5RegistryGithubV1RepoQueryServiceListRepoEventsResponse,
  J5RegistryGithubV1RepoQueryServiceListRepoEventsListRepoEventsRequest,
} from '../../../types/generated';
import { j5RegistryGithubV1RepoQueryServiceListRepoEvents } from '../../generated';

/**
 * @generated by NormalizedQueryPlugin (get /registry/github/v1/q/repo/:owner/:name/events) */

export function buildJ5RegistryGithubV1RepoQueryServiceListRepoEventsKey(
  request?: J5RegistryGithubV1RepoQueryServiceListRepoEventsListRepoEventsRequest,
) {
  const { page, ...rest } = request || {};
  if (rest) return ['J5RegistryGithubV1RepoEvent', 'list', rest] as const;
  return ['J5RegistryGithubV1RepoEvent'] as const;
}

export function useJ5RegistryGithubV1RepoQueryServiceListRepoEvents(
  request: J5RegistryGithubV1RepoQueryServiceListRepoEventsListRepoEventsRequest | undefined,
  options?: Partial<
    UseInfiniteQueryOptions<
      J5RegistryGithubV1RepoQueryServiceListRepoEventsResponse | undefined,
      Error,
      InfiniteData<J5RegistryGithubV1RepoQueryServiceListRepoEventsResponse | undefined>,
      J5RegistryGithubV1RepoQueryServiceListRepoEventsResponse | undefined,
      QueryKey,
      string | undefined
    >
  >,
) {
  return useInfiniteQuery({
    queryKey: buildJ5RegistryGithubV1RepoQueryServiceListRepoEventsKey(request),
    queryFn: async ({ pageParam }) =>
      j5RegistryGithubV1RepoQueryServiceListRepoEvents(
        '',
        request?.owner && request?.name ? { ...request, page: pageParam ? { token: pageParam } : undefined } : undefined,
      ),
    enabled: Boolean(request?.owner && request?.name),
    getNextPageParam: (response) => response?.page?.nextToken,
    initialPageParam: undefined,
    ...options,
  });
}
