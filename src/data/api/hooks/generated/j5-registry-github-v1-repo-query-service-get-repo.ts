/**
 * @generated by @pentops/jsonapi-jdef-ts-generator (Plugin: NormalizedQueryPlugin) - do not edit */

import { J5RegistryGithubV1RepoQueryServiceGetRepoResponse, J5RegistryGithubV1RepoQueryServiceGetRepoGetRepoRequest } from '../../../types/generated';
import { j5RegistryGithubV1RepoQueryServiceGetRepo } from '../../generated';
import { schema } from 'normalizr';
import { j5RegistryGithubV1RepoStateEntity } from '../../../entities/generated/j5-registry-github-v1-repo-state';
import { useQuery, type UseQueryOptions } from '@tanstack/react-query';
import { usePreloadDataFromNormalizedCache } from '@pentops/normalized-query-cache';

export const j5RegistryGithubV1RepoQueryServiceGetRepoResponseEntity = new schema.Object<J5RegistryGithubV1RepoQueryServiceGetRepoResponse>({
  repo: j5RegistryGithubV1RepoStateEntity,
});

/**
 * @generated by NormalizedQueryPlugin (get /registry/github/v1/q/repo/:owner/:name) */
export function useJ5RegistryGithubV1RepoQueryServiceGetRepo(
  request: J5RegistryGithubV1RepoQueryServiceGetRepoGetRepoRequest | undefined,
  options?: Partial<UseQueryOptions<J5RegistryGithubV1RepoQueryServiceGetRepoResponse | undefined>>,
) {
  const preloadData = usePreloadDataFromNormalizedCache<J5RegistryGithubV1RepoQueryServiceGetRepoResponse, 'repo'>(
    j5RegistryGithubV1RepoQueryServiceGetRepoResponseEntity,
    { repo: request?.owner && request?.name ? `${request.owner}-${request.name}` : undefined },
  );

  return useQuery({
    queryKey: [j5RegistryGithubV1RepoStateEntity.key, request],
    queryFn: async () => j5RegistryGithubV1RepoQueryServiceGetRepo('', request),
    enabled: Boolean(request?.owner && request?.name),
    meta: { normalizationSchema: j5RegistryGithubV1RepoQueryServiceGetRepoResponseEntity },
    placeholderData: preloadData,
    ...options,
  });
}
